<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark"
         implements="mx.core.IDataRenderer" 
         width="100%" height="100%" preinitialize="preinit(event)">
    <fx:Script>
        <![CDATA[
            import mx.events.FlexEvent;
            
            import spark.components.supportClasses.StyleableTextField;
            import spark.core.ContentCache;
            
            import utils.DeviceInfo;
            import views.DetailView;
            
            [Bindable]
            static protected var contentCache:ContentCache = new ContentCache();
            
            private var _data:Object;
            
            [Bindable]
            public function get data():Object
            {
                return _data;
            }
            
            public function set data(value:Object):void
            {
                if (value == _data)
                    return;
                
                _data = value;
                
                // Set the htmlText for the text display
                if (_data)
                {
                    var stf:StyleableTextField = pitch.textDisplay as StyleableTextField;
                    
                    // Sometimes the bullets get "stuck" in the default text format.
                    // Work around that by clearing them here.
                    var format:TextFormat = stf.defaultTextFormat;
                    format.bullet = null;
                    stf.defaultTextFormat = format;
                    stf.htmlText = cleanupHtml(data.pitchHtml);
                    
                    // Force a text re-measure. Forcing the width to 300 temporarily
                    // ensures that the html text is correctly formatted and measured
                    // when the pitch components size is validated.
                    stf.width = 300; 
                    pitch.skin.invalidateSize();
                }
                
                // Reset our scroll position to the top
                scroller.viewport.verticalScrollPosition = 0;
            }
            
            private function cleanupHtml(htmlText:String):String
            {
                // Flash does not like unterminated <li> tags, or <li>
                // tags with a <p> tag inside. This is an attempt to clean
                // up some of those situations.
                var cleanHtml:String = htmlText.replace(/<p><\/li>/g, "</li>");
                return cleanHtml;
            }
            
            protected function preinit(event:FlexEvent):void
            {
                currentState = DeviceInfo.isTablet ? "tablet" : "phone";
            }
            
            private function discuss_clickHandler():void
            {
                dispatchEvent(new Event(DetailView.DISCUSSION_CLICKED, true));
            }                            
        ]]>
    </fx:Script>
    
    <s:states>
        <s:State name="tablet" />
        <s:State name="phone" />
    </s:states>
    <s:Scroller id="scroller" width="100%" height="100%" horizontalScrollPolicy="off" touchDelay="0">
        <s:VGroup width="100%" gap="0" opaqueBackground="0xFFFFFF">
            <s:Group width="100%" cacheAsBitmap="true" opaqueBackground="0xFFFFFF">
                <s:Rect width="100%" height="100%">
                    <s:fill>
                        <s:LinearGradient rotation="90">
                            <s:GradientEntry color="#41aed7" ratio="0"/>
                            <s:GradientEntry color="#277793" ratio="1"/>
                        </s:LinearGradient>
                    </s:fill>
                </s:Rect>
                <s:Line left="0" top="0" bottom="0">
                    <s:stroke>
                        <s:SolidColorStroke color="0xFFFFFF" alpha="0.2" />
                    </s:stroke>
                </s:Line>
                <s:Line right="0" top="0" bottom="0">
                    <s:stroke>
                        <s:SolidColorStroke color="0" alpha="0.2" />
                    </s:stroke>
                </s:Line>
                <s:Label text="{data.title}" styleName="detailShadow" left="15" right="15" top="16" bottom="40" />
                <s:Label text="{data.title}" styleName="detailTitle" left="15" right="15" top="15" bottom="41" />
                <s:Label text="{data.soldQuantity} bought so far" styleName="detailBarShadow" left="15" right="15" bottom="14"/>				
                <s:Label text="{data.soldQuantity} bought so far" styleName="detailBar" left="15" right="15" bottom="15"/>	
                
                <!-- On phone, the 'Discuss' button pushes the discusson view. On Tablet, the 'Discuss' button opens a Callout -->
                <s:Button includeIn="phone" right="5" bottom="7" label="Discuss" styleName="smallButtonGreen" height="30" minHeight="30" click="discuss_clickHandler()"/>
                <s:CalloutButton includeIn="tablet" id="calloutButton" right="5" bottom="7" label="Discuss"
                                 styleName="smallButtonGreen" height="30" minHeight="30" verticalPosition="after">
                    <s:ViewNavigator firstView="views.DiscussionView" firstViewData="{data.id}" width="500" height="500" />
                </s:CalloutButton>
            </s:Group>
            <s:Group width="100%">
                <s:VGroup id="detailGroup" width="100%" minWidth="0" gap="15" paddingLeft="15" paddingTop="15" paddingRight="15" paddingBottom="15" horizontalAlign="center">
                    <s:Image source="{data.largeImageUrl}" contentLoader="{contentCache}" 
                             width="{Math.min(pitch.width, 440)}" 
                             height="{Math.min(pitch.width, 440) * 267 / 440}" 
                             enableLoadingState="true"/>
                    <s:TextArea id="pitch" width="100%" editable="false" selectable="false" paddingLeft="0" paddingTop="0" paddingRight="0" paddingBottom="0"
                                borderVisible="false" contentBackgroundColor="0xFFFFFF"
                                skinClass="spark.skins.mobile.TextAreaSkin" cacheAsBitmap="true" opaqueBackground="0xFFFFFF"/>				
                </s:VGroup>  
                <s:Line top="0" bottom="0" right="0">
                    <s:stroke>
                        <s:SolidColorStroke color="0" alpha="0.1" />
                    </s:stroke>
                </s:Line>
            </s:Group>
        </s:VGroup>
    </s:Scroller>
</s:Group>
