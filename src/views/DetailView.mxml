<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
        xmlns:s="library://ns.adobe.com/flex/spark"
		title=""
        initialize="initializeHandler(event)"
        viewActivate="viewActivateHandler()"
		viewDeactivate="viewDeactivateHandler()"
        creationComplete="creationCompleteHandler(event)"
        destructionPolicy="never">
    <fx:Script>
        <![CDATA[          
            import flash.net.navigateToURL;
            
            import models.Groupon;
            
            import mx.core.mx_internal;
            import mx.events.FlexEvent;
            import mx.events.TouchInteractionEvent;
            import mx.utils.StringUtil;
            
            import spark.components.supportClasses.StyleableTextField;
            import spark.transitions.FlipViewTransition;
            import spark.transitions.FlipViewTransitionMode;
            
            import utils.DeviceInfo;
            
            import valueObjects.Deal;
            
            use namespace mx_internal;
            
            public static const DISCUSSION_CLICKED:String = "discussionClicked";
            
			private var _timer: Timer;
			
			private function isoToDate(value:String):Date 
            {
				var dateStr:String = value;
				dateStr = dateStr.replace(/\-/g, "/");
				dateStr = dateStr.replace("T", " ");
				dateStr = dateStr.replace("Z", " GMT-0000");
				return new Date(Date.parse(dateStr));
			}
			
			override public function set data(value: Object): void 
            {
				super.data = value;
				if (value != null) 
                {
					updateTitle(null);
					
					if (_timer != null) 
						_timer.stop();
					
					_timer = new Timer(getTimeRemaining() < 86400 ? 1000 : 60000);
					_timer.addEventListener(TimerEvent.TIMER, updateTitle);
					_timer.start();
				}
			}			
			
			private function getTimeRemaining(): int 
            {
				var endDate: Date = isoToDate(data.endAt);
				return (endDate.getTime() - new Date().getTime()) / 1000;
			}
            
            private function viewActivateHandler():void 
            {
                addEventListener(DetailView.DISCUSSION_CLICKED, discussionClickedHandler);
            }
            
			private function viewDeactivateHandler(): void 
            {
				if (_timer != null) 
                {
					_timer.stop();
					_timer = null;
				}
                
                Groupon.getInstance().removeEventListener(Groupon.DEAL_SELECTED, dealSelectedHandler);
                removeEventListener(DetailView.DISCUSSION_CLICKED, discussionClickedHandler);
			}
			
			private function updateTitle(event: TimerEvent): void 
            {
				var timeRemaining: int = getTimeRemaining();
				var daysLeft: int = timeRemaining / 86400;
				var hoursLeft: int = (timeRemaining % 86400) / 3600;
				var minutesLeft: int = (timeRemaining % 3600) / 60;
				var secondsLeft: int = timeRemaining % 60;
				
				var result: String = "Ends in: "
				if (daysLeft == 0) 
					result += twodigit(hoursLeft) + "h " + twodigit(minutesLeft) + "m " + twodigit(secondsLeft) + "s";
				else 
					result += twodigit(daysLeft) + "d " + twodigit(hoursLeft) + "h " + twodigit(minutesLeft) + "m";

                title = result;
			}
			
			private function twodigit(value: Number): String 
            {
				if (value < 10)
					return "0" + value.toString();
				else 
					return value.toString();
			}
			
			private function buyButton_clickHandler(): void 
            {
				if (data != null)
					navigateToURL(new URLRequest(data.options.option.buyUrl));
			}
			
            // This event handler is only called in phone form factor.
			private function discussionClickedHandler(event:Event): void 
            {
                Groupon.getInstance().dealDiscussions = null;
				navigator.pushView(DiscussionView, data.id);
			}            
            
            private var lastHScrollPosition:int;
            
            protected function list_touchInteractionEndHandler(event:TouchInteractionEvent):void
            {
                // Check to see if the user swiped to a new deal
                if (list.scroller.viewport.horizontalScrollPosition != lastHScrollPosition)
                {
                    lastHScrollPosition = list.scroller.viewport.horizontalScrollPosition;
                    
                    // Determine new index
                    var newVisibleIndex:int = lastHScrollPosition / list.width;
                    
                    // Set the selected item in the model
                    Groupon.getInstance().selectedDeal = list.dataProvider.getItemAt(newVisibleIndex) as Deal;
                }
            }
            
            protected function dealSelectedHandler(event:Event):void
            {
                data = Groupon.getInstance().selectedDeal;
                
                // Calculate new index
                if (data && list.dataProvider)
                {
                    list.validateNow();
                    var newVisibleIndex:int = list.dataProvider.getItemIndex(data);
                    
                    // If this is called early in startup, snapElement can misbehave.
                    // To avoid that, make sure we have a contentHeight befor calling.
                    if (list.dataGroup.contentHeight)
                        list.scroller.snapElement(newVisibleIndex, false);
                }
            }
            
            protected function initializeHandler(event:FlexEvent):void
            {
                Groupon.getInstance().addEventListener(Groupon.DEAL_SELECTED, dealSelectedHandler);

                // For this view, the only additonal state we have is "needsBackButton". The 
                // back button is only needed for IOS phones (the discusson view on tablets
                // doesn't have a back button).
                currentState = DeviceInfo.isIOS && !DeviceInfo.isTablet ? "needsBackButton" : "normal";
            }
            
            protected function creationCompleteHandler(event:FlexEvent):void
            {
                // At view startup, make sure the selected deal is snapped into view
                dealSelectedHandler(null);
            }
            
        ]]>
    </fx:Script>
    
    <!-- This view only needs states for setting up the back button on IOS phone.
    
         See DiscussionView for an example with generic IOS states along with
         form factor states.
    -->
    <s:states>
        <s:State name="normal" />
        <s:State name="needsBackButton" />
    </s:states>
    
    <s:navigationContent.needsBackButton>
        <s:Button label="Deals" click="navigator.popView()" />
    </s:navigationContent.needsBackButton>
    
	<s:actionContent>
		<s:Button label="Buy" click="buyButton_clickHandler()"/>
	</s:actionContent>
    
    <!-- The details are shown in a horizontal list with page scrolling enabled.
         This allows the user to swipe left and right to navigate through deals. -->
    <s:List id="list" width="100%" height="100%" labelField="title"
            pageScrollingEnabled="true" scrollSnappingMode="center" 
            verticalScrollPolicy="off"
            itemRenderer="renderers.DetailRenderer"
            dataProvider="{Groupon.getInstance().nearbyDeals}"
            touchInteractionEnd="list_touchInteractionEndHandler(event)">
        <s:layout>
            <s:HorizontalLayout gap="0" variableColumnWidth="false" columnWidth="{list.width}" verticalAlign="contentJustify" />
        </s:layout>
    </s:List>
    
    <!-- Busy indicator -->
    <s:Group id="busyIndicator" horizontalCenter="0" verticalCenter="0" visible="{data == null}">
        <s:BusyIndicator horizontalCenter="0" />
        <s:Label text="Loading Deal..." top="30" />
    </s:Group>
</s:View>
